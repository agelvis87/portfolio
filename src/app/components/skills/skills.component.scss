@import "./../../app.component.scss";

body {
 height: 50%;
}

.skill-content {
  display: flex;
  justify-content: center;
}

.front-end {
  display: flex;
  justify-content: space-around;
}

.front-end-shape {
  width: 40%;
}

.front-end-text {
  width: 50%;
  padding-right: 10%;
  padding-top: 10vh;
  font-size: map-get($font-size, description);
  text-shadow: 4px 4px 4px map-get($colors, third);
  color: map-get($colors, first);
  line-height: 1.8;
  text-align: justify;
  text-indent: 50px;
}

/// Mixin to put items on a circle
/// [1] - Allows children to be absolutely positioned
/// [2] - Allows the mixin to be used on a list
/// [3] - In case box-sizing: border-box has been enabled
/// [4] - Allows any type of direct children to be targeted
///
/// @param {Integer} $nb-items - Number or items
/// @param {Length} $circle-size - Container size
/// @param {Length} $item-size - Item size
@mixin distribute-on-circle($nb-items, $circle-size, $item-size) {
  $half-item: ($item-size / 2);
  $half-parent: ($circle-size / 2);

  position: relative; /* 1 */
  width: $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%;
  list-style: none; /* 2 */
  box-sizing: content-box; /* 3 */

  > * {
    /* 4 */
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $item-size;
    height: $item-size;
    margin: -$half-item;
  }

  $angle: (360 / $nb-items);
  $rot: 0;

  @for $i from 1 through $nb-items {
    > :nth-of-type(#{$i}) {
      transform: rotate($rot * 1deg)
        translate($half-parent)
        rotate($rot * -1deg);
    }

    $rot: ($rot + $angle);
  }
}

/* @keyframes rot {
	from {
		transform: rotate(0deg)
		           translate(-150px)
		           rotate(0deg);
	}
	to {
		transform: rotate(360deg)
		           translate(-150px) 
		           rotate(-360deg);
	}
} */

.circle-container {
  @include distribute-on-circle(8, 20em, 6em);
  margin: 5em auto 0;
  border: solid 3px map-get($colors, second);
}

.circle-container img {
  display: block;
  width: 100%;
  border-radius: 50%;
  z-index: 2;
  filter: grayscale(100%);
  animation: rot 3s infinite linear;

  &:hover {
    filter: grayscale(0) drop-shadow(0 0 0.75rem map-get($colors, second));
    cursor: pointer;
  }
}

.title {
  display: flex;
  justify-content: center;
  font-size: map-get($font-size, title);
  color: map-get($colors, first);
  text-shadow: 4px 4px 4px map-get($colors, third);
  position: relative;
  top: -190px;
  left: 30%;
  width: 40%;
}
